# .example.env

# This file is designed to hold secrets like API and private keys without exposing them.
# Using the project locally without them is possible, but values will be needed here for
# deployment and other actions on public networks and testnets.

# In order to use this file, copy it and rename it .env

# Used to signal the gas reporter 
# (this is done so that when the tests run on CI where there is no .env, the gas reporter 
# won't run)
REPORT_GAS=true

# A private key is necessary for deploying and/or transacting on public networks
PRIVATE_KEY=

# The Hardhat config is configured to recognize 2 chains: a production hydra and the test net of hydra.
# To run on any of them, put a URL to an RPC in the proper field.

# If you are running a local node, use a URL to localhost, for example:
# http://localhost:8545
HYDRA_TESTNET_RPC=
HYDRA_CHAIN_RPC=

# An Etherscan API key is needed for verifying contracts on Ethereum (testnets/mainnet),
ETHERSCAN_API_KEY=

# Script Environment Variables
# These are used in the scripts to interact with the contracts

# Decode:
# The name of the contract that contains the function to decode
DECODE_CONTRACT_NAME=
# The address of the contract to decode
DECODE_CONTRACT_ADDRESS=
# The transaction hash of the function to decode
DECODE_TRANSACTION_HASH=
# The name of the function to decode
DECODE_FUNCTION_NAME=

# GetBlockData:
# The block number to get data from
GET_BLOCK_DATA_BLOCK_NUMBER=

# InRangeEvents:
# The address of the contract to get events from
IN_RANGE_EVENTS_CONTRACT_ADDRESS=
# The name of the contract to get events from
IN_RANGE_EVENTS_CONTRACT_NAME=
# The event name and parameters to get
IN_RANGE_EVENTS_EVENT=
# The address of the validator to get events for
IN_RANGE_EVENTS_VALIDATOR_ADDRESS=
# The start block to get events from
IN_RANGE_EVENTS_START_BLOCK=
# The end block to get events from (Should be <= 1000 + start block)
IN_RANGE_EVENTS_END_BLOCK=

# SumBlocksForAll:
# The number of blocks to check behind from the given block number
SUM_BLOCKS_FOR_ALL_CHECKED_BLOCKS=
# The address of the contract to get events from (RewardPool address)
SUM_BLOCKS_FOR_ALL_CONTRACT_ADDRESS=
# The name of the function to get events from (distributeRewardsFor)
SUM_BLOCKS_FOR_ALL_FUNCTION_NAME=

# SumBlocksForOne:
# The number to start checking blocks from
SUM_BLOCKS_FOR_ONE_BLOCK_NUMBER=
# The number of block to check to from the start block
SUM_BLOCKS_FOR_ONE_MAX_BLOCK_NUMBER=
# The address of the validator to get signed blocks for
SUM_BLOCKS_FOR_ONE_VALIDATOR_ADDRESS=
# The address of the contract to get events from (RewardPool address)
SUM_BLOCKS_FOR_ONE_CONTRACT_ADDRESS=
# The name of the function to get events from (distributeRewardsFor)
SUM_BLOCKS_FOR_ONE_FUNCTION_NAME=

# Permit:
# The private key of the person who will sign the permit
PERMIT_PRIVATE_KEY=
# The address of the contract token to permit
PERMIT_TOKEN_ADDRESS=
# The name of the token to permit
PERMIT_TOKEN_NAME=
# The version of the token to permit
PERMIT_TOKEN_VERSION=
# The chain ID of the token to permit
PERMIT_CHAIN_ID=
# The public key of the person who will sign the permit
PERMIT_OWNER=
# The the spender that will use the approved tokens
PERMIT_SPENDER=
# The amount to permit
PERMIT_VALUE=
# The nonce of the permit
PERMIT_NONCE=
# The deadline of the permit
PERMIT_DEADLINE=


#GetValidatorData:
# The address of the contract to get data from
GET_VALIDATOR_DATA_ADDRESS=

#GetDelegatePositionInfo
# The validator and the delegator addresses
VALIDATOR=
DELEGATOR=